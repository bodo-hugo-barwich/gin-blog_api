name: Testing against Compiler Versions

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
     branches: [ main ]  

jobs:

  compiler-version-testing:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go-version: [ 1.19.8, 1.20.0, 1.22.3 ]

    services:
      db:
        image: postgres:16.3-alpine3.20
        ports:
          - 5432:5432
        env:
          COMPONENT: ginblog_db
          POSTGRES_USER: gin_blog
          POSTGRES_PASSWORD: secret

    steps:
      - uses: actions/checkout@v4

      - name: Config App
        run: |
          cat .env_sample | sed -re "s/<database_host>/${DB_HOST}/" \
            -re "s/<database_name>/${DB_NAME}/" \
            -re "s/<database_user>/${DB_USER}/" \
            -re "s/<user_password>/${DB_PASSWORD}/" > .env.test
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DB_HOST: localhost
          DB_NAME: gin_blog
          DB_USER: gin_blog
          DB_PASSWORD: secret

      - name: Inspect Database
        run: |
          ping=0
          ping_max_count=10
          ping_count=0
          while [[ $ping -ne 1 && $ping_count -lt $ping_max_count ]]; do
            ping_count+=1
            ping_info=`psql "postgresql://gin_blog:secret@localhost" -c 'select 1 as ping;' || true
            echo "Ping No. $ping_count:"
            echo $ping_info
            ping=`echo "$ping_info" | grep -A2 -i "ping" | grep -oE "\d+"`
            
            if [ -z "$ping" ]; then
              ping=0
            fi			
          done	

          echo "* Service 'db' logs:"
          docker logs "${{ job.services.db.id }}"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '${{ matrix.go-version }}'

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DB_HOST: localhost
